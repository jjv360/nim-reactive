import std/tables
import std/strutils
import classes
import ./basecomponent


##
## Supported CSS property info
type CSSProperty = object

    ## The name used in the props
    propName: string

    ## The CSS property name
    cssName: string

    ## If true and the user provides a number, we'll add "px" to it
    isPx: bool


##
## List of all supported CSS properties
let supportedCSS = @[

    # Position fields
    CSSProperty(propName: "top", isPx: true),
    CSSProperty(propName: "left", isPx: true),
    CSSProperty(propName: "bottom", isPx: true),
    CSSProperty(propName: "right", isPx: true),
    CSSProperty(propName: "width", isPx: true),
    CSSProperty(propName: "height", isPx: true),
    CSSProperty(propName: "position"),
    CSSProperty(propName: "zIndex", cssName: "z-index"),
    CSSProperty(propName: "boxSizing", cssName: "box-sizing"),

    # Layout fields
    CSSProperty(propName: "display"),
    CSSProperty(propName: "padding", isPx: true),
    CSSProperty(propName: "paddingLeft", cssName: "padding-left", isPx: true),
    CSSProperty(propName: "paddingTop", cssName: "padding-top", isPx: true),
    CSSProperty(propName: "paddingBottom", cssName: "padding-bottom", isPx: true),
    CSSProperty(propName: "paddingRight", cssName: "padding-right", isPx: true),
    CSSProperty(propName: "marginLeft", cssName: "margin-left", isPx: true),
    CSSProperty(propName: "marginTop", cssName: "margin-top", isPx: true),
    CSSProperty(propName: "marginBottom", cssName: "margin-bottom", isPx: true),
    CSSProperty(propName: "marginRight", cssName: "margin-right", isPx: true),
    CSSProperty(propName: "overflow"),
    CSSProperty(propName: "overflowX", cssName: "overflow-x"),
    CSSProperty(propName: "overflowY", cssName: "overflow-y"),
    CSSProperty(propName: "webkitOverflowScrolling", cssName: "-webkit-overflow-scrolling"),

    # Flexbox fields
    CSSProperty(propName: "flex"),
    CSSProperty(propName: "justifyContent", cssName: "justify-content"),
    CSSProperty(propName: "alignItems", cssName: "align-items"),

    # Appearance fields
    CSSProperty(propName: "backgroundColor", cssName: "background-color"),
    CSSProperty(propName: "border"),
    CSSProperty(propName: "borderBottom", cssName: "border-bottom"),
    CSSProperty(propName: "borderTop", cssName: "border-top"),
    CSSProperty(propName: "borderLeft", cssName: "border-left"),
    CSSProperty(propName: "borderRight", cssName: "border-right"),
    CSSProperty(propName: "boxShadow", cssName: "box-shadow"),
    CSSProperty(propName: "opacity"),

    # Text fields
    CSSProperty(propName: "color"),
    CSSProperty(propName: "font"),
    CSSProperty(propName: "fontFamily", cssName: "font-family"),
    CSSProperty(propName: "fontWeight", cssName: "font-weight"),
    CSSProperty(propName: "fontStyle", cssName: "font-style"),
    CSSProperty(propName: "fontSize", cssName: "font-size", isPx: true),
    CSSProperty(propName: "textShadow", cssName: "text-shadow"),
    CSSProperty(propName: "lineHeight", cssName: "line-height"),
    CSSProperty(propName: "textAlign", cssName: "text-align"),


]


##
## Represents the HTML output of a component
class ReactiveHTMLOutput:

    ## HTML tag name
    var tagName = ""

    ## HTML tag ID (autogenerated)
    var privateTagID = ""

    ## HTML tag class name
    var tagClass = ""

    ## Attached CSS
    var css = ""

    ## True if it can have children
    var canHaveChildren = true

    ## Inner text for text elements
    var isTextElement = false
    var innerText = ""

    ## JavaScript code to execute when this component is mounted. The code will have access to an `element` variable representing the DOM node.
    var jsOnMount = ""

    ## JavaScript code to execute when this component is updated. The code will have access to an `element` variable representing the DOM node.
    var jsOnUpdate = ""

    ## JavaScript code to execute when this component is removed. The code will have access to an `element` variable representing the DOM node.
    var jsOnRemove = ""

    ## The component attached to this rendered item
    var component: Component

    ## Set CSS from a property bag
    method setCSSFromProps(props: Table[string, ReactivePropertyItem]) =

        # Create text
        var css = ""

        # Go through all supported props
        for field in supportedCSS:

            # Get value
            let val = props{field.propName}
            if val == nil:
                continue

            # Get sanitized value string
            let valStr = val.string.replace(";", "")

            # Get CSS property name
            var cssName = field.cssName
            if cssName.len == 0:
                cssName = field.propName

            # Check if it needs the px extension
            if field.isPx and val.isNumber:
                css = css & cssName & ": " & valStr & "px; "
            else:
                css = css & cssName & ": " & valStr & "; "

        # Done
        this.css = css